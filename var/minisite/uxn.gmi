
# ðŸ’» Informatique : Uxn

Uxn est un Ã©cosystÃ¨me applicatif complet, destinÃ© au dÃ©veloppement de petits outils et jeux, sous forme d'une machine virtuelle programmable dans un langage assembleur dÃ©diÃ© (uxntal) et possÃ©dant seulement 32 instructions, sur le principe d'une machine forth, dont il garde d'ailleurs la syntaxe postpositionnÃ©e (postfix), la pile (stack) et la capacitÃ© de produire une solution Ã  partir de composants simples et basiques. 

Uxn peut Ãªtre vu comme un processeur, et le reste des pÃ©riphÃ©riques (audio, Ã©cran, clavier, souris) est gÃ©rÃ© par une machine idÃ©ale nommÃ©e Varvara, les deux systÃ¨mes cohabitants parfaitement.

Les logiciels Ã©crits pour Uxn sont portables et destinÃ©s Ã  des ordinateurs ayant peu de ressources, dans l'esprit du permacomputing. En effet, seul un compilateur C est nÃ©cessaire pour faire fonctionner le coeur CPU (en console). Pour l'accÃ¨s aux pÃ©riphÃ©riques, il existe des dÃ©veloppements et portages vers diverses plate-formes, notamment en SDL2, ce qui lui permet de tourner sur de trÃ¨s nombreux OS (linux, macos, windows, haiku...). De plus il existe des versions spÃ©cifiques, citons par exemple la console Game Boy Advance, Nintendo DS, Playdate, DOS, Raspberry Pi Pico, Libretro, Web...

N'espÃ©rez pas recrÃ©er des jeux en 3D ou le pare-feu d'OpenOffice avec ce systÃ¨me, car les spÃ©cifications sont assez frugales, avec notamment 64 ko de mÃ©moire RAM. On retrouve un peu l'esprit de certaines consoles imaginaires (comme TIC-80).

Le dÃ©veloppeur principal d'Uxn est Devine Lu Linvega, du couple Hundred Rabbits. Rekka Bellum illustre le site et les outils dÃ©veloppÃ©s pour Uxn, et contribue donc grandement Ã  l'imaginaire autour de cet Ã©cosystÃ¨me.


Au niveau des outils disponibles dÃ©veloppÃ©s pour Uxn, on retrouve notamment :

* 'calc', une calculatrice graphique et centrÃ©e sur l'hexadÃ©cimal.
* 'left', un Ã©diteur de texte (pas utf-8 malheureusement, donc il n'est pas adaptÃ© Ã  la prose francophone).
* 'nasu', un Ã©diteur de sprites.
* 'noodle', un outil de dessin axÃ© pixel-art.
* 'donsol', un jeu de cartes sous forme de roguelike.
* 'orca', un sÃ©quenceur midi assez incroyable, oÃ¹ les notes sont entrÃ©es dans une grille sous forme de code ascii.
* 'turye', un Ã©diteur de polices de caractÃ¨res (en pixel, ce n'est pas l'Ã©quivalent de fontforge non plus).
* 'dexe', un Ã©diteur hexadÃ©cimal.
* 'piano', un petit synthÃ© permettant d'Ãªtre utilisÃ© avec orca par exemple.
* 'turquoise', un langue de programmation graphique proche de la "turtue" du logo.
* 'nebu', un tableur / Ã©diteur .csv en 6,2 ko!

Il faut garder Ã  l'esprit que les binaires gÃ©nÃ©rÃ©s sont extrÃªmement compacts, par exemple le sÃ©quenceur orca ne fait que 11 ko dans la version Unx. Sa version console (pour terminal), Ã©crite en C classique, prend un peu plus de 100 ko, tandis que la version pour Electron, qui a quasi les mÃªmes fonctionnalitÃ©s, pÃ¨se plus de 400 Mo !


En conclusion, Uxn est un outil original, dÃ©veloppÃ© par des passionnÃ©s et conÃ§u dans le but de sortir des paradigmes modernes de dÃ©veloppement.


=> https://100r.co/site/uxn.html                 Site principal d'Uxn 
=> https://wiki.xxiivv.com/site/varvara.html     PrÃ©sentation de Varvara 
=> https://wiki.xxiivv.com/site/uxntal.html      Le langage de programmation uxntal 
=> https://github.com/hundredrabbits/awesome-uxn Tout sur Uxn 
=> https://compudanzas.net/uxn_tutorial.html     Un tutoriel sous forme de leÃ§ons sur 7 jours 




## Astuces Uxn


* Pour crÃ©er un "lanceur" qui compilera automatiquement le code uxntal et dÃ©marrera la rom, appelez ce script 'uxn.sh' par exemple, et placez-le dans /usr/local/bin :

```
#!/bin/bash 
## compile tal file and run rom file

for file in $1; do

if [ ${file: -4} == ".tal" ]
then 
	uxnasm $file "${file%.*}".rom && uxnemu "${file%.*}".rom
else
	if [ ${1: -4} == ".rom" ]	
	then 
		uxnemu -s 2 "${file%.*}".rom
	fi
fi

done;
```


* Pour les thÃ¨mes (fichiers .theme (1)), il faut Ã©diter le fichier en hexadÃ©cimal (avec dexe (2) par exemple), ce n'est pas un fichier au format ascii !

Comme indiquÃ© dans la notice (1), les 6 bytes se dÃ©composent ainsi :

Les bytes (ou octets) sont un ensemble de 2 valeurs hexadÃ©cimales nommÃ©es nibbles, allant de 0 Ã  f. Les bytes sont assemblÃ©s 2 par 2 sous forme de shorts (donc 4 valeurs hexa constituÃ©es de 4 nibbles). Le premier nibble du premier short indique la valeur rouge (red) de la premiÃ¨re couleur, le premier nibble du deuxiÃ¨me short indique la valeur verte (green) de la premiÃ¨re couleur etc.

Chaque Ã©lÃ©ment est redoublÃ© pour reconstituer la valeur hexa telle qu'on la connaÃ®t en HTML (5 devient 55 etc), de cette faÃ§on : 

```
0a6f 05cf 0caf ( #000000 #aa55cc #66ccaa #ffffff )
```

Exemples de thÃ¨mes :

```
cf90 7c60 7c70 ( red brick )
9f40 7c40 cc80 ( purple )
cf80 cf80 cf80 ( gray )
df75 cf43 be00 ( sepia )
bf94 af62 9e20 ( sepia alt )
49bf 26af 029e ( sepia inverted )

```


=> https://wiki.xxiivv.com/site/theme.html  (1) ThÃ¨mes
=> https://git.sr.ht/~rabbits/dexe          (2) Dexe



* Pour compiler Uxn sous Haiku, rajouter :

```
export CC=cc-x86
```

en console avant de lancer ./build.sh, sinon Ã§a ne compilera pas



=> gemini://geminispace.info/        Site de recherche Geminispace
